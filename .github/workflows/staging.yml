name: Deploy Staging

on:
  push:
    branches: [ master ]

env:
  PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  SERVICE_NAME: geoipd-alpha
  REGION: ${{ vars.GCP_REGION }}
  ARTIFACT_REGISTRY_REPO: geoipd

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker to use Artifact Registry
      run: |
        if [ -z "${{ env.REGION }}" ]; then
          echo "‚ùå Error: REGION environment variable is not set!"
          echo "Please set the GCP_REGION GitHub variable in your repository settings."
          echo "Go to: Settings ‚Üí Secrets and variables ‚Üí Actions ‚Üí Variables"
          echo "Add: GCP_REGION = asia-east1 (or your preferred region)"
          exit 1
        fi
        echo "Configuring Docker for Artifact Registry in region: ${{ env.REGION }}"
        gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

    - name: Get Git metadata
      id: git
      run: |
        echo "hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "tag=$(git describe --tags --exact-match 2>/dev/null || echo '')" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      run: |
        if [ -z "${{ env.REGION }}" ]; then
          echo "‚ùå Error: REGION environment variable is not set!"
          exit 1
        fi
        IMAGE_URL="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/geoipd"
        echo "Building and pushing image: $IMAGE_URL"
        docker build \
          --build-arg GIT_HASH=${{ steps.git.outputs.hash }} \
          --build-arg GIT_TAG=${{ steps.git.outputs.tag }} \
          -t $IMAGE_URL \
          -f build/Dockerfile \
          .
        docker push $IMAGE_URL

    - name: Deploy to Cloud Run
      run: |
        if [ -z "${{ env.REGION }}" ]; then
          echo "‚ùå Error: REGION environment variable is not set!"
          exit 1
        fi
        IMAGE_URL="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/geoipd"
        echo "Deploying image: $IMAGE_URL"
        echo "To service: ${{ env.SERVICE_NAME }} in region: ${{ env.REGION }}"
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image=$IMAGE_URL \
          --region=${{ env.REGION }} \
          --platform=managed \
          --set-env-vars=GEOIP2_CLOUD_STORAGE_BUCKET=geoipd \
          --set-env-vars=GEOIP2_CLOUD_STORAGE_PROVIDER=gcs \
          --memory=128Mi \
          --cpu=1 \
          --allow-unauthenticated

    - name: Get service URL
      id: service-url
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --format='value(status.url)')
        echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT

    - name: Wait for service to be ready
      run: |
        echo "Waiting for service to be ready..."
        for i in {1..30}; do
          if curl -s -f "${{ steps.service-url.outputs.url }}/v1/version" > /dev/null; then
            echo "Service is ready!"
            break
          fi
          echo "Attempt $i/30: Service not ready yet, waiting 10s..."
          sleep 10
        done

    - name: Test service with known IPs
      run: |
        SERVICE_URL="${{ steps.service-url.outputs.url }}"
        
        echo "Testing version endpoint..."
        VERSION_RESPONSE=$(curl -s -f "$SERVICE_URL/v1/version")
        echo "Version: $VERSION_RESPONSE"
        
        echo "Testing Google DNS (8.8.8.8) city lookup..."
        CITY_RESPONSE=$(curl -s -f "$SERVICE_URL/v1/city?ip=8.8.8.8")
        echo "City response: $CITY_RESPONSE"
        
        echo "Testing Cloudflare DNS (1.1.1.1) country lookup..."
        COUNTRY_RESPONSE=$(curl -s -f "$SERVICE_URL/v1/country?ip=1.1.1.1")
        echo "Country response: $COUNTRY_RESPONSE"
        
        # Basic validation that responses contain expected fields
        if echo "$CITY_RESPONSE" | grep -q '"city"'; then
          echo "‚úÖ City response contains city field"
        else
          echo "‚ùå City response missing city field"
          exit 1
        fi
        
        if echo "$COUNTRY_RESPONSE" | grep -q '"country"'; then
          echo "‚úÖ Country response contains country field"
        else
          echo "‚ùå Country response missing country field"
          exit 1
        fi
        
        echo "üéâ All tests passed!"